
/**
 * 外观模式
 * 定义：提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统
 * 更容易使用。
 * 
 * 要点：
 * ①当需要使用一个现有的类而其他接口并不符合你的需求时，就使用适配器。
 * ②当需要简化并统一一个很大的接口或者一群复杂的接口时，使用外观模式。
 * ③适配器改变接口以符合客户的期望。
 * ④外观将客户从一个复杂的子系统中解耦。
 * ⑤实现一个适配器可能需要一番功夫，也可能不费功夫，视目标接口的大小与复杂程度而定。
 * ⑥实现一个外观，需要将子系统组合进外观中，然后将工作委托给子系统执行。
 * ⑦适配器有两种形式：对象适配器和类适配器。类适配器需要用到多继承。
 * ⑧你可以为一个子系统实现一个以上的外观。
 * ⑨适配器将一个对象包装起来以改变其接口；装饰者将一个对象包装起来以增加新的行为
 * 和责任；而外观将一群对象“包装”起来以简化其接口。
 * 
 * 设计原则：
 * 最少知识原则：只和你的密友谈话。
 * 注：是说当你正在设计一个系统，不管是任何对象，你都要注意它所交互的类有哪些，并
 * 注意它和这些类是如何交互的。
 * 
 * 这个原则提供了一些方针：就任何对象而言，在该对象的方法内，我们只应该调用属于以下范围
 * 的方法：
 * ①该对象本身
 * ②被当做方法的参数而传递进来的对象
 * ③此方法所创建或实例化的任何对象
 * ④对象的任何组件
 * 注：①②③告诉我们，如果某对象是调用其他的方法的返回结果，不要调用该对象方法。④把“组件”
 * 想像成是被实例变量所引用的任何对象，换句话说，把这想像成是“有一个”(has-A)关系
 * 
 * 实例：家庭影院
 * 在一个家庭影院中，包含许多对象：放映机，银幕，DVD播放器等；如果想看电影时，一个个打开这些
 * 设备有点麻烦，如果使用外观模式，将放映机，银幕，DVD播放器作为组件作为家庭影院的外观，然后在外观
 * 类中设置一个方法，该方法体按照看电影需要的的步骤调用各个组件，就可以通过一个按钮来完成整个看电影
 * 所需打开设备的过程了。
 * 
 * */

public class _8_WaiGuanMode {

	public static void main(String[] args) {
		

	}

}
